https://www.f5.com/labs/articles/threat-intelligence/new-golang-malware-is-spreading-via-multiple-exploits-to-mine-mo

Based on the data from the F5 Labs article, here's a concise and informative list:
1.Golang Malware: Emergence of new malware written in Go (Golang), targeting Linux-based servers for Monero cryptocurrency mining.
2.Multiple Propagation Methods: Spreads using seven methods including exploiting four web application vulnerabilities (ThinkPHP, Drupal, Confluence), SSH credential enumeration, Redis password enumeration, and leveraging found SSH keys.
3.Cryptocurrency Mining Objective: Primary goal is to install a cryptominer targeting Monero.
4.Operational Mechanism: On compromising a system, executes a bash script from Pastebin to download, decode, and run further payloads.
5.Persistence Creation: Establishes persistence through cron jobs, disables security controls, and sets itself as a service on the infected machine.
6.Competitor Process Termination: Kills other processes especially those consuming significant CPU resources, likely other cryptominers.
7.Spread to Known SSH Hosts: Attempts to infect known SSH hosts from the infected machine.
8.Limited Antivirus Detection: Not widely detected by antivirus programs at the time of the article, often classified as a generic threat.

This summary encapsulates the key points of the new Golang malware threat as reported by F5 Labs, highlighting its unique propagation methods, objectives, and challenges in detection.
1.Isolation: Disconnect the affected systems from your network to prevent the malware from spreading.
2.Strengthen Access Controls: Change all passwords and review user access privileges. Ensure that credentials are strong and SSH keys are secure
3.Enhance Monitoring: Implement or enhance system and network monitoring to detect and alert on unusual activities
4.Implement Continuous Integration/Continuous Deployment (CI/CD) Security Practices: Integrate security practices into your CI/CD pipeline.
5.Create a Response Plan: Develop or update your incident response plan for handling such security breaches in the future.
6.Review Code and Dependencies: Check your codebase and third-party dependencies for potential vulnerabilities or malicious code.
7.Update and Patch: Update all software, including your Go environment and dependencies, to the latest versions. Apply all relevant security patches.
8.Use code quality tools on before and after development to detect lack code like sonarlint, sonarqube